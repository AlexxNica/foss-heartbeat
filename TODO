Meta: look into Python classes, since indexing into arrays is unreadable and prone to introducing bugs.

X. GET ALL THE DATA!!!! (And document the date I pulled the data on)

2. Find the project's bots.

   Rust has a couple bots:
    - bors is a test and merge bot.
      https://github.com/graydon/bors
      Someone can approve a PR by commenting '@bors r+'
      They can also roll up a PR into a daily(?) batch of commits
    - rust-highfive
      suggest reviewers based on which files are touched
      https://github.com/nrc/highfive

X. From their initial interaction with a project, how long did it take them to achieve that role?

6. What length of time did they take that role on (first action to last action)?

7. During their time in that role, was their average number of actions in that role per month?

8. Are they active now in that role?

(Note: 5,6,7,8 can be visualized with a dot chart)

X. Help newcomers determine who they should be paying attention to review wise:

recently active (frequency of recent comments? e.g. comments/week in the last X period)
long-standing

sort scatter data by contribs per week (largest first)
take the top 1/4 of the array
charting median value on the chart might be good

10. Consider allowing the software to be pointed at one or more organizations to get a more complete view of a community across its various codebases

Roles to look at later:
   - Documentation vs code contributor (opened a PR including a doc file that was merged)
     This is too much data to look at, since it would involve queries into the files touched for the pull request.


Questions I want to answer for newcomers looking for a project:

On average, X percent of $PROJECT contributors are $ROLE, and it takes them Y number of days to ramp up.
On average, first pull requests are open Y number of days and it takes Z number of review comments to get them merged.
Successful first pull requests often referenced an issue with the tag X.
Successful first pull requests often touched these directories.
